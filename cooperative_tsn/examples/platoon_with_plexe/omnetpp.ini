[General]
cmdenv-express-mode = true
cmdenv-status-frequency = 1s
num-rngs = 6


**.cmdenv-log-level = "debug"
cmdenv-output-file = result.log
network = Platooning

*.*.*.eth[*].bitrate = 100Mbps

*.*.visualizer.typename = "IntegratedMultiCanvasVisualizer"
*.*.visualizer.infoVisualizer.displayInfos = true

# Ieee80211Interface
*.node[*].*.wlan[0].mgmt.typename = "Ieee80211MgmtAdhoc"
*.node[*].*.wlan[0].agent.typename = ""
*.node[*].*.wlan[0].opMode = "p"
*.node[*].*.wlan[0].radio.typename = "Ieee80211DimensionalRadio"
*.node[*].*.wlan[0].radio.bandName = "5.9 GHz"
*.node[*].*.wlan[0].radio.channelNumber = 3
*.node[*].*.wlan[0].radio.transmitter.power = 20mW
*.node[*].*.wlan[0].radio.bandwidth = 10 MHz
*.node[*].*.wlan[*].radio.antenna.mobility.typename = "AttachedMobility"
*.node[*].*.wlan[*].radio.antenna.mobility.mobilityModule = "^.^.^.^.^.inet_mobility"
*.node[*].*.wlan[*].radio.antenna.mobility.offsetX = -2.5m
*.node[*].*.wlan[*].radio.antenna.mobility.offsetZ = 1.5m
*.node[*].*.wlan[*].radio.antenna.mobility.constraintAreaMinX = 0m
*.node[*].*.wlan[*].radio.antenna.mobility.constraintAreaMaxX = 0m
*.node[*].*.wlan[*].radio.antenna.mobility.constraintAreaMinY = 0m
*.node[*].*.wlan[*].radio.antenna.mobility.constraintAreaMaxY = 0m
*.node[*].*.wlan[*].radio.antenna.mobility.constraintAreaMinZ = 0m
*.node[*].*.wlan[*].radio.antenna.mobility.constraintAreaMaxZ = 0m



**.ipv4.configurator.typename = "HostAutoConfigurator"
**.ipv4.arp.typename = "GlobalArp"
# *.node[*].ipv4.configurator.mcastGroups = "224.0.0.1"

# configurator settings for TSN nodes with wlan
**.tsnDevice[*].ipv4.configurator.interfaces = "eth0"
**.platoonDevice.ipv4.configurator.interfaces = "eth0"
**.tsnClock.ipv4.configurator.interfaces = "eth0"
**.tsnNic.ipv4.configurator.interfaces = "eth0 wlan0"
**.ipv4.routingTable.multicastForwarding = false
**.ethernet.macHeaderChecker.promiscuous = true

# interface table
**.interfaceTable.displayAddresses = true
# Visualizer settings
**.visualizer.interfaceTableVisualizer.displayInterfaceTables = true



## gPTP 
**.hasTimeSynchronization = false
**.syncInterval = 100s
**.pdelayInterval = 100s
# TSN clock gPTP master ports
*.*.tsnClock.gptp.masterPorts = ["eth0"]

# TSN switch gPTP bridge master ports
*.*.tsnSwitch[0].gptp.masterPorts = ["eth1", "eth2"]
*.*.tsnSwitch[1].gptp.slavePort = "eth2"
*.*.tsnSwitch[1].gptp.masterPorts = ["eth0", "eth1"]
*.*.tsnSwitch[2].gptp.slavePort = "eth2"
*.*.tsnSwitch[2].gptp.masterPorts = ["eth0", "eth1", "eth3"]

# Set all reference clocks to master clock so the time difference can be visualized
*.*.referenceClock = "Platooning.node[" + string(ancestorIndex(3)) + "].tsnClock.clock"

*.node[*].veinsmobility.x = 0
*.node[*].veinsmobility.y = 0
*.node[*].veinsmobility.z = 0

# TSN Nic mobility
**.tsnNic.mobility.mobilityModule = "^.^.inet_mobility"

**.tsnDevice[0].numApps = 0
**.tsnDevice[0].app[0].typename = "SamplePlatoonApplication"
**.tsnDevice[0].app[0].display-name = "best effort"
**.tsnDevice[0].app[0].destAddresses = "TSNUpperLevel.node[" + string(ancestorIndex(2)) + "].tsnNic%eth0"
**.tsnDevice[0].app[0].finalAddress = "TSNUpperLevel.node[" + string(ancestorIndex(2) + 1) + "].tsnNic"
**.tsnDevice[0].app[0].destPort = 1000
**.tsnDevice[0].app[0].messageLength = 100B
**.tsnDevice[0].app[0].sendInterval = exponential(500ms)
**.tsnDevice[0].app[0].localPort = 1000

# forwarding table
**.forwardingRules = {"BaseFrame1609_4_Container": {"destination": "platoonDevice", "port": 3000, "pcp": 0}}

# IntegratedCanvasVisualizer (2D)
*.visualizer.*.obstacleLossVisualizer.displayIntersections = true
*.visualizer.*.obstacleLossVisualizer.displayFaceNormalVectors = true
*.visualizer.*.obstacleLossVisualizer.intersectionLineColor = "yellow"
*.visualizer.*.mediumVisualizer.signalPropagationAnimationSpeed = 500/3e8
*.visualizer.*.mediumVisualizer.signalTransmissionAnimationSpeed = 50000/3e8
*.visualizer.*.mediumVisualizer.displaySignals = true
*.visualizer.canvasVisualizer.mediumVisualizer.displaySignalDepartures = false
*.visualizer.canvasVisualizer.mediumVisualizer.displaySignalArrivals = false
*.visualizer.*.physicalLinkVisualizer.displayLinks = true

##########################################################
#            Simulation parameters                       #
##########################################################
debug-on-errors = false
print-undisposed = true

*.playgroundSizeX = 65000m
*.playgroundSizeY = 25000m
*.playgroundSizeZ = 50m

sim-time-limit = 15 s

##########################################################
# Annotation parameters                                  #
##########################################################
*.annotations.draw = false

##########################################################
# Obstacle parameters                                    #
##########################################################
*.obstacles.debug = false

##########################################################
#            WorldUtility parameters                     #
##########################################################
*.world.useTorus = false
*.world.use2D = false

##########################################################
#            TraCIScenarioManager parameters             #
##########################################################
*.manager.updateInterval = 0.01s
*.manager.host = "localhost"
*.manager.moduleType = "org.car2x.veins.subprojects.cooperative_tsn.nodes.PlatoonTSNCar"
*.manager.moduleName = "node"
*.manager.moduleDisplayString = ""
*.manager.autoShutdown = true
*.manager.margin = 25

##########################################################
#            11p specific parameters                     #
#                                                        #
#                    NIC-Settings                        #
##########################################################
*.connectionManager.sendDirect = true
*.connectionManager.maxInterfDist = 2600m
*.connectionManager.drawMaxIntfDist = false

*.**.nic.mac1609_4.useServiceChannel = false

*.**.nic.mac1609_4.txPower = 100mW
*.**.nic.mac1609_4.bitrate = 6Mbps

*.**.nic.mac1609_4.useAcks = true
*.**.nic.mac1609_4.ackErrorRate = 0.0
*.**.nic.mac1609_4.frameErrorRate = 0.0

*.**.nic.phy80211p.minPowerLevel = -94dBm
*.**.nic.phy80211p.maxTXPower = 100mW
*.**.nic.phy80211p.useNoiseFloor = true
*.**.nic.phy80211p.noiseFloor = -95dBm
*.**.nic.phy80211p.decider = xmldoc("config.xml")
*.**.nic.phy80211p.analogueModels = xmldoc("config.xml")
*.**.nic.phy80211p.usePropagationDelay = true

##########################################################
#                      Mobility                          #
##########################################################
*.node[*].mobility.x = 0
*.node[*].mobility.y = 0
*.node[*].mobility.z = 1.895


##########################################################
#                    Seeds and PRNGs                     #
##########################################################
seed-set = ${repetition}
**.seed = ${repetition}

*.node[*].prot.rng-0 = 2
*.node[*].appl.rng-0 = 3
*.node[*].scenario.rng-0 = 4
**.traffic.rng-0 = 5

#launch config. tells Veins which SUMO configuration to run
*.manager.configFile = "./sumocfg/freeway.sumo.cfg"
*.manager.launchConfig = xmldoc("./sumocfg/freeway.launchd.xml")

##########################################################
#                   Common parameters                    #
##########################################################

**.numberOfCars = ${nCars = 5}
**.numberOfCarsPerPlatoon = ${platoonSize = 5}
**.numberOfLanes = ${nLanes = 1}

##########################################################
#                    Position helper                     #
##########################################################

*.node[*].helper_type = "PositionHelper"

##########################################################
#               Scenario common parameters               #
##########################################################

#controller and engine related parameters
*.node[*].scenario.caccC1 = 0.5
*.node[*].scenario.caccXi = 1
*.node[*].scenario.caccOmegaN = 0.2 Hz
*.node[*].scenario.caccSpacing = 5 m
*.node[*].scenario.engineTau = 0.5 s
*.node[*].scenario.ploegH = ${ploegH = 0.5}s
*.node[*].scenario.ploegKp = 0.2
*.node[*].scenario.ploegKd = 0.7
*.node[*].scenario.useRealisticEngine = false
#via wireless send acceleration computed by the controller, not the actual one
*.node[*].scenario.useControllerAcceleration = true
*.node[*].scenario.nLanes = ${nLanes}

#controllers to be tested
**.numericController = ${controller = 0, 0, 1, 2, 3, 4}

#headway for ACCs
**.headway = ${headway = 0.3, 1.2, 0.1, 0.1, 0.1, 0.1 ! controller}s
*.node[*].scenario.accHeadway = ${headway}s
*.node[*].scenario.leaderHeadway = ${leaderHeadway = 1.2}s

#average leader speed
*.node[*].scenario.leaderSpeed = ${leaderSpeed = 100}kmph

##########################################################
#                      Application                       #
##########################################################

*.node[*].appl_type = "SimplePlatooningApp"
#enable statistics recording for the application
*.node[*].appl.*.scalar-recording = true
*.node[*].appl.*.vector-recording = true

##########################################################
#                Communication protocols                 #
##########################################################

*.node[*].protocol_type = "SimplePlatooningBeaconing"
#enable statistics recording for the network layer
*.node[*].prot.*.scalar-recording = true
*.node[*].prot.*.vector-recording = true
#set the beaconing interval to be 0.1s
*.node[*].prot.beaconingInterval = ${beaconInterval = 0.1}s
#access category for platooning beacons
*.node[*].prot.priority = ${priority = 4}
#packet size for platooning beacon
*.node[*].prot.packetSize = ${packetSize = 200}

##########################################################
#                    Traffic manager                     #
##########################################################

**.traffic_type = "PlatoonsTrafficManager"
#insert platooning vehicles at time
**.traffic.platoonInsertTime = 1 s
#insert platooning vehicles with a speed of
**.traffic.platoonInsertSpeed = ${leaderSpeed}kmph
#insert nCars platooning vehicles
**.traffic.nCars = ${nCars}
#let platoonSize cars per platoon
**.traffic.platoonSize = ${platoonSize}
#use nLanes lanes
**.traffic.nLanes = ${nLanes}
#SUMO vtype for platooning vehicles
**.traffic.platooningVType = "vtypeauto"
#controller being used in the different simulations
**.traffic.controller = ${sController = "ACC", "ACC", "CACC", "PLOEG", "CONSENSUS", "FLATBED" ! controller}
#insert vehicles already at steady-state. distance depends on controller
**.traffic.platoonInsertDistance = ${2, 2, 5, 2, 15, 5 ! controller}m
**.traffic.platoonInsertHeadway = ${0.3, 1.2, 0, 0.5, 0.8, 0 ! controller}s
**.traffic.platoonLeaderHeadway = ${leaderHeadway}s


#disable statistics recording for all other modules
**.scalar-recording = true
**.vector-recording = true

##########################################################
#                Wired connection parameters             #
##########################################################
**.length = 1m
**.datarate = 100Mbps

[Config Platooning]
*.manager.command = "sumo-gui"

#use the base scenario
*.node[*].scenario_type = "SimpleScenario"

output-vector-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.sca

[Config Platooning-TSN]
extends = Platooning
*.manager.command = "sumo"
*.manager.ignoreGuiCommands = true

################
# TSN Switches #
################
**.tsnSwitch[*].hasEgressTrafficShaping = true
**.tsnSwitch[*].bridging.directionReverser.reverer.excludeEncapsulationProtocols = ["ieee8021qctag"]
**.tsnSwitch[*].bridging.streamCode.decoder.mapping = [{pcp: 0, stream: "platoon"}]
**.tsnSwitch[*].bridging.streamCode.encoder.mapping = [{stream: "platoon", pcp: 0}]
**.tsnSwitch[*].hasIncomingStreams = true
**.tsnSwitch[*].hasOutgoingStreams = true

################
# TSN Talkers  #
################
**.platoonDevice.hasOutgoingStreams = true
**.platoonDevice.bridging.streamIdentifier.identifier.mapping = [{stream: "platoon", packetFilter: expr(has(udp))}]
**.platoonDevice.bridging.streamCode.encoder.mapping = [{stream: "platoon", pcp: 0}]

################
# TSN Config   #
################
**.tsnSwitch[*].eth[*].macLayer.queue.numTrafficClasses = 2

**.gateScheduleConfigurator.typename = "TSNschedGrpcGateScheduleConfigurator"
#**.gateScheduleConfigurator.typename = "EagerGateScheduleConfigurator"

**.gateScheduleConfigurator.gateCycleDuration = 100ms
**.gateScheduleConfigurator.configuration = 
    [    {pcp:0, gateIndex:0, application: "app[0]", source: "tsnNic", destination: "platoonDevice", packetLength: 15744b, packetInterval: 100ms, maxLatency: 2000ms }]
# {pcp:0, gateIndex:0, application: "^.prot", source: "platoonDevice", destination: "tsnNic", packetLength: 254kB, packetInterval: 100ms, maxLatency: 100ms }
**.initiallyOpen = true



[Config Platooning-TSN-dyn]
extends = Platooning-TSN

**.tsnNic.app[0].typename = "DynSchedForwardingApplication"

[Config Platooning-Sin-TSN-dyn]
extends = Platooning-TSN-dyn

*.node[*].scenario_type = "SinusoidalScenario"
#make the leader accelerate and decelerate with a sinusoidal trend. set to 0 for constant speed
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.oscillationAmplitude = 10 kmph
*.node[*].scenario.startOscillating = 5 s

output-vector-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.sca

[Config Sinusoidal]
extends = General
*.manager.command = "sumo"
*.manager.ignoreGuiCommands = true

#use the sinusoidal scenario
*.node[*].scenario_type = "SinusoidalScenario"

#make the leader accelerate and decelerate with a sinusoidal trend. set to 0 for constant speed
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.oscillationAmplitude = 10 kmph
*.node[*].scenario.startOscillating = 5 s

output-vector-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.sca

[Config Braking]
*.manager.command = "sumo-gui"

#use the braking scenario
*.node[*].scenario_type = "BrakingScenario"

#make the leader decelerate with a certain deceleration
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.brakingDeceleration = 8 mpsps
*.node[*].scenario.startBraking = 5 s

output-vector-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.sca

[Config PlatooningNoGui]
extends = Platooning

*.manager.command = "sumo"
*.manager.ignoreGuiCommands = true
#force the config name in the output file to be the same as for the gui experiment
output-vector-file = ${resultdir}/Platooning_${controller}_${headway}_${repetition}.vec
output-scalar-file = ${resultdir}/Platooning_${controller}_${headway}_${repetition}.sca

[Config SumoTraffic]
extends = Platooning

**.traffic_type = "SumoTrafficManager"
*.manager.configFile = "sumocfg/freeway-manual.sumo.cfg"

output-vector-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.vec

[Config SinusoidalNoGui]
extends = Sinusoidal

*.manager.command = "sumo"
*.manager.ignoreGuiCommands = true
#force the config name in the output file to be the same as for the gui experiment
output-vector-file = ${resultdir}/Sinusoidal_${controller}_${headway}_${repetition}.vec
output-scalar-file = ${resultdir}/Sinusoidal_${controller}_${headway}_${repetition}.sca

[Config BrakingNoGui]
extends = Braking

*.manager.command = "sumo"
*.manager.ignoreGuiCommands = true
#force the config name in the output file to be the same as for the gui experiment
output-vector-file = ${resultdir}/Braking_${controller}_${headway}_${repetition}.vec
output-scalar-file = ${resultdir}/Braking_${controller}_${headway}_${repetition}.sca

[Config SumoTrafficNoGui]
extends = SumoTraffic

*.manager.command = "sumo"
*.manager.ignoreGuiCommands = true
#force the config name in the output file to be the same as for the gui experiment
output-vector-file = ${resultdir}/SumoTraffic_${controller}_${headway}_${repetition}.vec
output-scalar-file = ${resultdir}/SumoTraffic_${controller}_${headway}_${repetition}.sca


[Config deactivated]
extends = Sinusoidal
*.manager.command = "sumo"
*.manager.ignoreGuiCommands = true
**.forwardingRules = {"BaseFrame1609_4_Container": {"destination": "tsnDevice[0]", "port": 3000, "pcp": 0}}

**.tsnDevice[0].numApps = 1
**.tsnDevice[0].app[0].typename = "UdpSinkApp"
**.tsnDevice[0].app[0].localPort = 3000

